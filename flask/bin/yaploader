#!/usr/bin/python
# -*- coding: utf-8 -*-

####
# 2008-2012 Alexander Artemenko <svetlyak.40wt@gmail.com>
#
# Special thanks to:
# Grigory Bakunov <bobuk@justos.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import getpass
import itertools
import logging
import os
import sys
import urllib
from yafotki.utils import OptionParser, Option
from optparse import OptionGroup, IndentedHelpFormatter, SUPPRESS_USAGE
from functools import wraps

import yafotki

CONFIG_PATH = os.path.expanduser('~/.fotki.conf')
TOKEN_CACHE = os.path.expanduser('~/.fotki.token')

class Config(object):
    '''Simple config loader with singleton instance'''
    _shared = {
        '_loaded': False,
        'access_type': 'public',
        'disable_comments': 'no',
        'xxx': 'no',
        'hide_original': 'no',
        'storage_private': 'no',
    }

    def __init__(self):
        self.__dict__ = self._shared
        if not self._loaded:
            if os.path.exists(CONFIG_PATH):
                with open(CONFIG_PATH) as cfg:
                    for line in (x.strip() for x in cfg.readlines()):
                        if line[0] == '#':
                            continue

                        if '=' not in line:
                            [key, value] = [line, True]
                        else:
                            [key, value] = [x.strip() for x in line.split('=')]
                        setattr(self, key, value)

            if os.path.exists(TOKEN_CACHE):
                with open(TOKEN_CACHE) as f:
                    username, token = f.readline().split(':')
                    self.token = token.strip()
                    self.username = username.strip()

            self._loaded = True


    def update(self, opts):
        for key in dir(opts):
            if not key.startswith('_'):
                value = getattr(opts, key)
                if not hasattr(value, '__call__') and value:
                    setattr(self, key, value)

    def __getattr__(self, name):
        return None

    def __repr__(self):
        return repr(self.__dict__)


def auth_required(func):
    @wraps(func)
    def wrap(self, uploader, *args, **kwargs):
        if not uploader.api.token:
            logging.error('Please use "auth" command to authorize on the service.')
            sys.exit(1)
        return func(self, uploader, *args, **kwargs)
    return wrap

def _getn(iterable, n):
    '''Returns N-th element from iterable, or None'''
    l = list(itertools.islice(iterable, n, n+1))
    return l and l[0] or None

_photo_options = [
    Option('-t', '--title', dest='title',
           help='Image\'s title (by default it will be extracted from exif).'),
    Option('-k', '--tags', dest='tags',
           help='Comma separated tags/keywords (by default it will be extracted from exif).'),
    Option('-s', '--summary', dest='summary',
           help='Short description (by default it will be extracted from exif).'),
    Option('--access', dest='access_type',
           help='String value, one from the following list: ['
                '"public", "friends", "private"] (default %default).',
           default=Config().access_type),
    Option('--no-comments', dest='disable_comments',
           help='Disable comments, "yes" or "no" (default %default)).',
           default=Config().disable_comments),
    Option('-x', '--xxx', dest='xxx',
           help='Content for adults only, "yes" or "no" (default %default)).',
           default=Config().xxx),
    Option('--hide-original', dest='hide_original',
           help='Hide original image from other users, "yes" or "no" (default %default)).',
           default=Config().hide_original),
    Option('--storage-private', dest='storage_private',
           help='Disable image downloading from other sources, "yes" or "no" (default %default)).',
           default=Config().storage_private),
]

def _build_usage(name, opts, appendix = None):
    def build_opt(opt):
        pattern = opt.required and '%s=%s' or '[%s=%s]'
        return pattern % (opt.get_opt_string(), opt.dest.upper())
    opts = [
        build_opt(opt)
        for opt in opts]
    if appendix:
        opts.append(appendix)
    return '%%prog %s %s' % (name, ' '.join(opts))


class CommandAuth:
    name = 'auth'
    description = 'Authenticate and store token in ~/.fotki.token.'
    option_list = [
        Option('-u', '--username', dest='username',
               help='Your login.', required = True),
    ]
    usage = _build_usage(name, option_list)
    def run(self, uploader, opts, args):
        logging.debug('getting new authentication token')

        if uploader.config.username is None:
            logging.error('Please supply username via '
                          '--username option or in the config.')
            sys.exit(0)

        password = uploader.config.password or \
                   getpass.getpass('Input password: ')

        uploader.api.auth(uploader.config.username, password)
        with open(TOKEN_CACHE, 'w+') as f:
            f.write('%s: %s' % (uploader.config.username, uploader.api.token))

        print 'New token was written to %r' % TOKEN_CACHE


class CommandUpload:
    name = 'upload'
    description = 'Upload photos to album.'
    option_list = [
        Option('-a', '--album', type='int', dest='album',
               help='Album\'s number (required).', required=True),
        Option('-o', '--output', type = 'str', dest='output', default='alternate',
               help="Link output format.", required=False)

    ] + _photo_options
    usage = _build_usage(name, option_list, 'files')

    @auth_required
    def run(self, uploader, opts, args):
        user = uploader.api.find_user(uploader.config.username)
        album = _getn(user.albums, opts.album - 1)
        if album is None:
            logging.error('Album not found.')
            sys.exit(1)
        if uploader.config.output not in ['orig', 'alternate', 'all',
            'XXXS', 'XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL']:
            logging.error("Unknown output format")
            sys.exit(1)
        for filename in args[1:]:
            photo = album.upload(
                filename,
                title=uploader.config.title,
                tags=uploader.config.tags,
                description=uploader.config.description,
                access_type=yafotki.ACCESS.fromstring(uploader.config.access_type),
                disable_comments=uploader.config.disable_comments,
                xxx=uploader.config.xxx,
                hide_orig=uploader.config.hide_original,
                storage_private=uploader.config.storage_private,
            )
            if not uploader.config.output or uploader.config.output  == 'alternate':
                print photo.links['alternate']
            else:
                if uploader.config.output in photo.img:
                    print photo.img[uploader.config.output]['href']
                else:
                    if uploader.config.output != 'all':
                        logging.error("This image cannot work with output format `%s'." % \
                            (uploader.config.output))
                    for x in  photo.img.keys():
                        print x + ': ' + str(photo.img[x]['href'])

class CommandGetAlbums:
    name = 'albums'
    description = 'Show albums list.'
    option_list = [
        Option('-u', '--user', dest='username',
               help='User\'s login at Yandex.'),
    ]
    usage = _build_usage(name, option_list)

    def run(self, uploader, opts, args):
        user = uploader.api.find_user(uploader.config.username)
        uploader._print_albums(user.albums)


class CommandGetPhotos:
    name = 'photos'
    description = 'Show photos in album'
    option_list = [
        Option('-a', '--album', dest='album', type='int',
               help='Album\'s number.'),
        Option('-u', '--user', dest='username',
               help='User\'s login at Yandex.'),
    ]
    usage = _build_usage(name, option_list)
    def run(self, uploader, opts, args):
        user, album, photos = uploader._get_photos(opts)
        if album is not None:
            print 'Album "%s"' % album.title
        else:
            print '%s photos' % user.username

        for i, photo in enumerate(photos):
            print '%i) "%s"' % (i+1, photo.title)


class CommandDownload:
    name = 'download'
    description = 'Download all photos of photos from given album.'
    option_list = [
        Option('-a', '--album', dest='album', type='int',
               help='Album\'s number (optional, if not given, then all user\'s photos will be downloaded.'),
        Option('-d', '--dir', dest='dir',
               help='Output directory.', default='.'),
        Option('-u', '--user', dest='username',
               help='User\'s login at Yandex.'),
    ]
    usage = _build_usage(name, option_list)
    def run(self, uploader, opts, args):
        user, album, photos = uploader._get_photos(opts)

        output_dir = opts.dir
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        print 'Downloading photos, please, be patient, it can take some time ;-)'
        for photo in photos:
            url = photo.content[0].src
            filename = photo.title
            if '.' not in filename:
                # May be worse to use:
                # os.popen('file -i ' + filename, 'r').read()
                # here but I won't.
                filename += '.jpg'

            f = open(os.path.join(output_dir, filename), 'wb')
            try:
                f.write(urllib.urlopen(url).read())
                sys.stdout.write('.')
                sys.stdout.flush()
            finally:
                f.close()


class CommandCreateAlbum:
    name = 'create-album'
    description = 'Create new album.'
    option_list = [
        Option('-t', '--title', dest='title',
               help='Album\'s title.', required = True),
        Option('-s', '--summary', dest='summary',
               help='Short description.')
    ]
    usage = _build_usage(name, option_list)
    @auth_required
    def run(self, uploader, opts, args):
        user = uploader.api.find_user(uploader.config.username)
        album = user.create_album(opts.title, opts.summary)
        print 'Album was created: ' + album.links['alternate']


class CommandDeleteAlbum:
    name = 'delete-album'
    description = 'Delete album.'
    option_list = [
        Option('-a', '--album', dest='album', type='int',
               help='Album\'s number.', required = True),
    ]
    usage = _build_usage(name, option_list)
    @auth_required
    def run(self, uploader, opts, args):
        user = uploader.api.find_user(uploader.config.username)
        album = _getn(user.albums, opts.album - 1)
        if album is None:
            logging.error('Album not found')
            sys.exit(1)
        else:
            confirm = raw_input('Do you really want to delete album "%s" (yes/no)?\n' % yafotki.smart_str(album.title))
            if confirm == 'yes':
                album.delete()
                print 'Album was deleted'
            else:
                print 'Cancelled'


class CommandDeletePhoto:
    name = 'delete-photo'
    description = 'Delete photo from album.'
    option_list = [
        Option('-a', '--album', dest='album', type='int',
               help='Album\'s number.', required = True),
        Option('-p', '--photo', dest='photo', type='int',
               help='Photo\'s number.', required = True),
    ]
    usage = _build_usage(name, option_list)
    @auth_required
    def run(self, uploader, opts, args):
        user = uploader.api.find_user(uploader.config.username)
        album = _getn(user.albums, opts.album - 1)
        if album is None:
            logging.error('Album not found')
            sys.exit(1)
        photo = _getn(album.photos, opts.photo - 1)
        if photo is None:
            logging.error('Photo not found')
            sys.exit(1)

        photo.delete()
        print 'Photo was deleted'


class CommandModifyAlbum:
    name = 'modify-album'
    description = 'Change album\'s title and/or summary.'
    option_list = [
        Option('-a', '--album', dest='album', type='int',
               help='Album\'s number.', required = True),
        Option('-t', '--title', dest='title',
               help='Album\'s title.'),
        Option('-s', '--summary', dest='summary',
               help='Short description.')
    ]
    usage = _build_usage(name, option_list)
    @auth_required
    def run(self, uploader, opts, args):
        user = uploader.api.find_user(uploader.config.username)
        album = _getn(user.albums, opts.album - 1)
        uploader._save_object(album, opts)
        print 'Album was modified'


class CommandModifyPhoto:
    name = 'modify-photo'
    description = 'Change photo\'s metadata.'
    option_list = [
        Option('-a', '--album', dest='album', type='int',
               help='Album\'s number.', required = True),
        Option('-p', '--photo', dest='photo', type='int',
               help='Photo\'s number.', required = True),
    ] + _photo_options
    usage = _build_usage(name, option_list)
    @auth_required
    def run(self, uploader, opts, args):
        user = uploader.api.find_user(uploader.config.username)
        album = _getn(user.albums, opts.album - 1)
        photo = _getn(album.photos, opts.photo - 1)
        uploader._save_object(photo, opts)
        print 'Photo was modified'


class Uploader(object):
    client_id = '34d63f8827b54629b45dad99bda613a3'
    secret = 'f745c0a7fc884baa95ed113284e46b26'

    def __init__(self):
        self.config = Config()

        self.api = yafotki.Api(
            self.client_id,
            self.secret,
            self.config.token,
        )

    def _get_photos(self, opts):
        user = self.api.find_user(self.config.username)
        if opts.album is not None:
            album = _getn(user.albums, opts.album - 1)
            return user, album, album.photos
        else:
            return user, None, user.photos

    def _print_albums(self, albums):
        for i, album in enumerate(albums):
            if album.imageCount:
                image_count = '%d image(s)' % album.imageCount
            else:
                image_count = 'empty'

            if self.config.verbose:
                print '%i) "%s", real id "%s", %s' % \
                    (i+1, album.title, album.id, image_count)
            else:
                print '%i) "%s", %s' % (i+1, album.title, image_count)

    def _save_object(self, obj, update_from):
        for field in obj.fields:
            value = getattr(update_from, field, None)
            if value is not None:
                setattr(obj, field, value.decode('UTF8'))
        obj.save()


class MyHelpFormatter(IndentedHelpFormatter):
    def __init__(self, heading):
        self.heading = heading
        IndentedHelpFormatter.__init__(self)

    def format_heading(self, heading):
        return '%*s%s:\n' % (self.current_indent, "", self.heading)


def main():
    usage = 'usage: %prog command [options] [args]'
    option_list = [
        Option('-h', '--help', dest='help', action='store_true',
                help='Print help and exit.', default=False),
        Option('-v', '--verbose', dest='verbose', action='store_true',
                help='Output more information.', default=False),
        Option('-q', '--quiet', dest='quiet', action='store_true',
                help='Output less information.', default=False),
        Option('-V', '--version', dest='version', action='store_true',
                help='Show version number and quit.', default=False),
    ]

    uploader = Uploader()

    commands = dict(
        (command.name, command()) \
        for key, command in globals().iteritems() \
            if key.startswith('Command'))

    args = sys.argv

    if len(args) > 1:
        command_name = args.pop(1)
    else:
        command_name = None

    command = commands.get(command_name, None)
    if command:
        option_list.extend(command.option_list)
        usage = getattr(command, 'usage', usage)

    parser = OptionParser(
        option_list=option_list,
        usage=usage,
        add_help_option=False,
    )

    def print_help():
        parser.print_help()
        if command is None:
            print '\nCommands:'
            for cmd in commands.values():
                print '%16s %s' % (cmd.name, getattr(cmd, 'description', ''))

    opts, args = parser.parse_args(args)

    if opts.version:
        print 'Python uploader for http://fotki.yandex.ru, version %s.' % yafotki.__version__
        print 'For more information and new versions, visit http://svetlyak.ru.'
        sys.exit(0)

    if opts.help or command is None:
        print_help()
        sys.exit(1)

    if opts.verbose:
        logging.basicConfig(level = logging.DEBUG, format = '%(message)s')
    elif opts.quiet:
        logging.basicConfig(level = logging.ERROR, format = '%(message)s')
    else:
        logging.basicConfig(level = logging.WARNING, format = '%(message)s')

    config = Config()
    config.update(opts)
    logging.debug('Config values %r' % config)

    command.run(uploader, opts, args)

if __name__ == "__main__":
    main()
    sys.exit(0)

